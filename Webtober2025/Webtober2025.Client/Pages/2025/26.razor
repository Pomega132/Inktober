@page "/2025/26"
@using Webtober2025.Client.Models


@implements IAsyncDisposable
@implements IKeyState

@inject IJSRuntime _JS

<div class="d-flex justify-space-between">
    <h3>26 - Déroutant</h3>

    <div class="d-flex gap-5">
        <MudText Typo="Typo.h6">Temps : @($"{DateTime.Now - _GameStart:mm\\:ss}")</MudText>
        <MudText Typo="Typo.h6">Vitesse : @($"{_Vitesse:0}") km/h</MudText>
    </div>
</div>

<MudPaper Class="flex-1 d-flex justify-space-around">
    <div>
        <canvas @ref="_Canvas" id="game" class="border" tabindex="0" width="1000" height="798" @onkeydown="((IKeyState)this).AddKeyPress" @onkeyup="((IKeyState)this).RemoveKeyPress"></canvas>
    </div>
</MudPaper>

@code {
    ElementReference _Canvas { get; set; }
    IJSObjectReference? _Module { get; set; }
    Task _GameLoopTask { get; set; } = Task.CompletedTask;
    bool _GameStrated { get; set; } = true;
    DateTime _GameStart { get; set; } = DateTime.Now;
    bool _Looping { get; set; } = true;
    double _Vitesse { get; set; } = 0;   
    Point _Position { get; set; } = new Point(500, 0);


    public List<IKeyState.E_Controle> KeysPressed { get; } = new List<IKeyState.E_Controle>();
    public IKeyState.KeyControles Controles { get; } = new IKeyState.KeyControles()
    {
        new IKeyState.KeyControle() { C = IKeyState.E_Controle.LEFT, KeysBinding = new List<string> { "ArrowLeft", "KeyA" } },
        new IKeyState.KeyControle() { C = IKeyState.E_Controle.RIGHT, KeysBinding = new List<string> { "ArrowRight", "KeyD" } },
        new IKeyState.KeyControle() { C = IKeyState.E_Controle.UP, KeysBinding = new List<string> { "ArrowUp", "KeyW", "Space" } },
        new IKeyState.KeyControle() { C = IKeyState.E_Controle.DOWN, KeysBinding = new List<string> { "ArrowDown", "KeyS" } },
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _Module = await _JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/26/GameRender.js");
            await _Module.InvokeVoidAsync("InitGame");
            await _Canvas.FocusAsync();

            _GameLoopTask = Task.Run(GameLoop);
        }
    }


    async void GameLoop()
    {
        while (_Looping)
        {
            try
            {
                if (_GameStrated)
                {
                    DateTime start = DateTime.Now;    
                    
                    double acceleration = 0;
                    if (KeysPressed.Contains(IKeyState.E_Controle.UP))
                        acceleration = 17;
                        else if (KeysPressed.Contains(IKeyState.E_Controle.DOWN))
                        acceleration = -20;

                    if (KeysPressed.Contains(IKeyState.E_Controle.LEFT))
                        _Position.X -= 10;
                    else if (KeysPressed.Contains(IKeyState.E_Controle.RIGHT))
                        _Position.X += 10;

                    acceleration -= Math.Sqrt(_Vitesse);
                    _Vitesse += acceleration * 0.03;

                    if (_Vitesse < 0)
                        _Vitesse = 0;

                    _Position.Y += (int)_Vitesse;

                    if (_Module is not null)
                        await _Module.InvokeVoidAsync("RenderGame", _Position);

                    await InvokeAsync(StateHasChanged);

                    DateTime end = DateTime.Now;

                    int frameTime = (int)(end - start).TotalMilliseconds;
                    if (frameTime < 16)
                        await Task.Delay(16 - frameTime);
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(ex.GetMessages().ToShow());
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_Module is not null)
        {
            try
            {
                await _Module.DisposeAsync();
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.GetMessages().ToShow());
            }
        }
    }
}
