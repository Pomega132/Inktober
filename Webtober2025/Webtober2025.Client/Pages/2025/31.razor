@page "/2025/31"
@using System.Text
@using Webtober2025.Client.Models

@implements IAsyncDisposable

@inject IJSRuntime JS
@inject IDialogService DialogService

<h3>31 - Recompense</h3>

<MudPaper>
    <MudStack Row="true">
        <div class="flex-1 d-flex justify-center">
            <img src="/images/2025/31/trophee.png" height="500" @onclick="ClickTrophee" />
        </div>
        <MudStack>
            <MudText Typo="Typo.h5">Score actuel : @_Datas.Score</MudText>
            @foreach (KeyValuePair<string, Amelioration> amelioration in _Ameliorations)
            {
                if (amelioration.Value.Visible(_Datas))
                {
                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.body1">@amelioration.Key (Niveau @_Datas.GetLevel(amelioration.Key)) - Coût : @amelioration.Value.GetCost(_Datas.GetLevel(amelioration.Key))</MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(_Datas.Score < amelioration.Value.GetCost(_Datas.GetLevel(amelioration.Key)))" OnClick="@(() => { _Datas.UpgradeAmelioration(amelioration); StateHasChanged(); })">Améliorer</MudButton>
                    </MudStack>
                }
            }
        </MudStack>
    </MudStack>
</MudPaper>

@lock (_Locker)
{
    foreach (var medaille in _Medailles)
    {
        <div class="medaille absolute" style="left:@(medaille.Position.X)px; top:@(medaille.Position.Y)px;opacity:@(medaille.Opacity);">
            <img src="/Images/2025/31/Medaille.png" height="50" />
        </div>
    }
}

@code {
    IJSObjectReference? _Module { get; set; }
    Datas _Datas = new Datas();
    Dictionary<string, Amelioration> _Ameliorations { get; set; } = [];
    List<Medaille> _Medailles { get; } = new List<Medaille>();
    object _Locker = new object();
    public Timer? _AutoSave { get; set; }
    public Timer? _TimesTrigger { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _AutoSave = new Timer(new TimerCallback(async datas => await Save()), null, 60000, 60000);
        _TimesTrigger = new Timer(new TimerCallback(async datas => await EffectsTigger()), null, 1000, 1000);

        _Ameliorations.Add("Auto cliqueur", new Amelioration(
            name: "Auto cliqueur",
            baseCost: new BigNumber(10),
            visible: datas => true,
            effect: (datas, level) =>
            {
                datas.Score += (int)Math.Pow(5, level);
            }
        ));

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _Module = await JS.InvokeAsync<IJSObjectReference>("import", "/Scripts/31/Utilities.js");
            try
            {
                _Datas = await _Module.InvokeAsync<Datas>("Load") ?? new Datas();
            }
            catch
            {
                _Datas = new Datas();
            }
        }
    }

    async Task Save()
    {
        if (_Module is not null)
        {
            try
            {
                await _Module.InvokeVoidAsync("Save", _Datas);
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.GetMessages().ToShow());
            }
        }
    }

    async Task EffectsTigger()
    {
        _Datas.TriggerAllEffect(_Ameliorations);

        await InvokeAsync(StateHasChanged);
    }

    void ClickTrophee(MouseEventArgs args)
    {
        _Datas.Score++;

        Medaille medaille = new Medaille(new Point(args.ClientX - 25, args.ClientY - 25));
        medaille.NeedDestroy += () =>
        {
            lock (_Locker)
                _Medailles.Remove(medaille);
            InvokeAsync(StateHasChanged);
        };
        lock (_Locker)
            _Medailles.Add(medaille);
        medaille.Run(1080, this);
    }

    public async ValueTask DisposeAsync()
    {
        if (_Module is not null)
        {
            try
            {
                await _Module.InvokeVoidAsync("Save", _Datas);

                await _Module.DisposeAsync();
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.GetMessages().ToShow());
            }
        }
    }

    class Datas
    {
        public BigNumber Score { get; set; } = [0];
        public Dictionary<string, int> Ameliorations { get; set; } = [];

        public void UpgradeAmelioration(KeyValuePair<string, Amelioration> amelioration)
        {
            if (!Ameliorations.ContainsKey(amelioration.Key))
            {
                Ameliorations[amelioration.Key] = 0;
            }
            int level = Ameliorations[amelioration.Key];

            amelioration.Value.Upgrade(this, ref level);
            Ameliorations[amelioration.Key] = level;
        }

        public int GetLevel(string name)
        {
            if (!Ameliorations.ContainsKey(name))
            {
                Ameliorations[name] = 0;
            }
            return Ameliorations[name];
        }

        public void TriggerAllEffect(Dictionary<string, Amelioration> ameliorations)
        {
            foreach (var pair in Ameliorations)
            {
                if (!ameliorations.ContainsKey(pair.Key))
                    continue;

                if (pair.Value <= 0)
                    continue;

                string name = pair.Key;
                int level = pair.Value;
                Amelioration amelioration = ameliorations[name];
                amelioration.TriggerEffect(this, level);
            }
        }
    }

    class BigNumber : List<int>
    {
        public BigNumber() : base() { }
        public BigNumber(IEnumerable<int> collection) : base(collection) { }
        public BigNumber(long number) : base()
        {
            if (number == 0)
            {
                this.Add(0);
                return;
            }
            while (number > 0)
            {
                this.Add((int)(number % 1_000_000));
                number /= 1_000_000;
            }
        }
        public BigNumber(double number) : this((long)number) { }

        public static BigNumber operator +(BigNumber a, BigNumber b)
        {
            BigNumber result = new BigNumber();
            int maxLength = Math.Max(a.Count, b.Count);
            int carry = 0;
            for (int i = 0; i < maxLength; i++)
            {
                int partA = i < a.Count ? a[i] : 0;
                int partB = i < b.Count ? b[i] : 0;
                int sum = partA + partB + carry;
                result.Add(sum % 1_000_000);
                carry = sum / 1_000_000;
            }
            if (carry > 0)
            {
                result.Add(carry);
            }
            return result;
        }

        public static BigNumber operator +(BigNumber a, long b)
        {
            return a + new BigNumber(b);
        }

        public static BigNumber operator ++(BigNumber a)
        {
            if (a.Count == 0)
            {
                a.Add(1);
                return a;
            }

            a[0]++;

            return a;
        }

        public static BigNumber operator -(BigNumber a, BigNumber b)
        {
            BigNumber result = new BigNumber();
            int maxLength = Math.Max(a.Count, b.Count);
            int borrow = 0;
            for (int i = 0; i < maxLength; i++)
            {
                int partA = i < a.Count ? a[i] : 0;
                int partB = i < b.Count ? b[i] : 0;
                int diff = partA - partB - borrow;
                if (diff < 0)
                {
                    diff += 1_000_000;
                    borrow = 1;
                }
                else
                {
                    borrow = 0;
                }
                result.Add(diff);
            }
            // Remove leading zeros
            while (result.Count > 1 && result[result.Count - 1] == 0)
            {
                result.RemoveAt(result.Count - 1);
            }
            return result;
        }

        public static BigNumber operator *(BigNumber a, double b)
        {
            BigNumber result = new BigNumber();
            double carry = 0;
            for (int i = 0; i < a.Count; i++)
            {
                double prod = a[i] * b + carry;
                result.Add((int)(prod % 1_000_000));
                carry = Math.Floor(prod / 1_000_000);
            }
            while (carry > 0)
            {
                result.Add((int)(carry % 1_000_000));
                carry = Math.Floor(carry / 1_000_000);
            }
            return result;
        }

        public static bool operator <(BigNumber a, BigNumber b)
        {
            if (a.Count != b.Count)
                return a.Count < b.Count;
            for (int i = a.Count - 1; i >= 0; i--)
            {
                if (a[i] != b[i])
                    return a[i] < b[i];
            }
            return false;
        }

        public static bool operator >(BigNumber a, BigNumber b)
        {
            return b < a;
        }

        /// </summary>
        /// Afficher le BigNumber sous forme lisible (9 999 × 10^6)
        /// <summary>
        /// <returns>Valeur sous forme lisible.</returns>
        public override string ToString()
        {
            // Si le nombre est nul ou vide
            if (this.Count == 0 || (this.Count == 1 && this[0] == 0))
                return "0";

            // On part du chiffre le plus élevé (dernier élément)
            int highestIndex = this.Count - 1;
            int highestValue = this[highestIndex];

            // On affiche le chiffre le plus élevé, puis les suivants avec des zéros non significatifs
            StringBuilder sb = new StringBuilder();
            if (highestValue < 10_000)
            {
                if (highestIndex == 0) // Si on est au niveau des unités
                {
                    return highestValue.ToString("# ##0");
                }
                else
                {
                    int power = highestIndex * 6;
                    if (highestValue < 1_000)
                    {
                        string number = highestValue.ToString();
                        string previusNumber = this[highestIndex - 1].ToString("D6");

                        for (int i = 0; i < 4; i++)
                        {
                            if (i == 1)
                                sb.Append(" ");

                            if (number.Length > i)
                                sb.Append(number[i]);
                            else
                            {
                                sb.Append(previusNumber[i - number.Length]);
                                power--;
                            }
                        }
                    }
                    else
                    {
                        sb.Append(highestValue.ToString("# ##0"));
                    }

                    sb.Append($" × 10^{power}");
                }
            }
            else
            {
                int power = highestIndex * 6;
                while (highestValue > 10_000)
                {
                    highestValue /= 10;
                    power++;
                }
                sb.Append(highestValue.ToString("# ##0"));
                sb.Append($" × 10^{power}");
            }

            return sb.ToString();
        }
    }

    class Amelioration(string name, BigNumber baseCost, Amelioration.Condition visible, Amelioration.Effect effect, double costMultiplier = 1.15)
    {
        private BigNumber _BaseCost { get; set; } = baseCost;
        private double _CostMultiplier { get; set; } = costMultiplier;
        private Effect _Effect { get; set; } = effect;

        public string Name { get; set; } = name;
        public Condition Visible { get; set; } = visible;

        public delegate void Effect(Datas datas, int Level);
        public delegate bool Condition(Datas datas);

        public BigNumber GetCost(int level) => _BaseCost * Math.Pow(_CostMultiplier, level);

        public void Upgrade(Datas datas, ref int level)
        {
            if (datas.Score < GetCost(level))
                return;

            datas.Score -= GetCost(level);
            level++;
        }

        public void TriggerEffect(Datas datas, int level)
        {
            _Effect(datas, level);
        }
    }

    class Medaille(Point position)
    {
        const double Gravity = 0.98;
        const double TerminalVelocity = 20.0;
        const double OpacityIncreaseRate = 0.05;

        public event Action? NeedDestroy;

        public Point Position { get; set; } = position;
        public Point Velocity { get; set; } = new Point(RNG.Next(-5, 5), RNG.Next(-20, -10));
        public double Opacity { get; set; } = 0;

        public void Run(int endOfScreen, _31 page)
        {
            Task.Run(async () =>
            {
                while (Position.Y < endOfScreen)
                {
                    await Task.Delay(20);
                    if (Opacity < .5)
                    {
                        Opacity += OpacityIncreaseRate;
                    }
                    UpdatePosition(page);
                }

                NeedDestroy?.Invoke();
            });
        }

        private void UpdatePosition(_31 page)
        {
            Position = new Point(Position.X + Velocity.X, Position.Y + Velocity.Y);
            Velocity = new Point(Velocity.X, Velocity.Y + Gravity);
            if (Velocity.Y > TerminalVelocity)
            {
                Velocity = new Point(Velocity.X, TerminalVelocity);
            }

            page.InvokeAsync(page.StateHasChanged);
        }
    }
}
